openapi: 3.0.0
info:
  title: User API
  description: API для регистрации, аутентификации и управления профилем пользователя
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Локальный сервер разработки

paths:
  /register:
    post:
      summary: Регистрация нового пользователя
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Пользователь успешно зарегистрирован
        '400':
          description: Ошибка валидации или пользователь уже существует
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /login:
    post:
      summary: Аутентификация пользователя
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Ошибка аутентификации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /profile:
    get:
      summary: Получение данных профиля пользователя
      operationId: getProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Данные профиля пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Обновление профиля пользователя
      operationId: updateProfile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Профиль успешно обновлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Профиль успешно обновлен
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    RegisterRequest:
      type: object
      required:
        - login
        - password
        - email
      properties:
        login:
          type: string
          minLength: 4
          maxLength: 20
          example: user123
        password:
          type: string
          minLength: 6
          example: password123
        email:
          type: string
          format: email
          example: user@example.com
    
    LoginRequest:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
          example: user123
        password:
          type: string
          example: password123
    
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    
    UpdateProfileRequest:
      type: object
      properties:
        first_name:
          type: string
          example: Иван
        last_name:
          type: string
          example: Иванов
        birth_date:
          type: string
          description: >
            Дата рождения в одном из поддерживаемых форматов: 
            YYYY-MM-DD (ISO 8601), DD.MM.YYYY, MM/DD/YYYY, YYYY/MM/DD
          example: 1990-01-01
        email:
          type: string
          format: email
          example: ivan@example.com
        phone:
          type: string
          example: "+7 (900) 123-45-67"
    
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        login:
          type: string
          example: user123
        email:
          type: string
          format: email
          example: user@example.com
        first_name:
          type: string
          example: Иван
        last_name:
          type: string
          example: Иванов
        birth_date:
          type: string
          format: date-time
          example: 1990-01-01T00:00:00Z
        phone:
          type: string
          example: "+7 (900) 123-45-67"
        created_at:
          type: string
          format: date-time
          example: 2023-01-01T12:00:00Z
        updated_at:
          type: string
          format: date-time
          example: 2023-01-01T12:00:00Z
    
    Error:
      type: object
      properties:
        error:
          type: string
          example: Ошибка валидации

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
